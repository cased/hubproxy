// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: queries.sql

package sqldb

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const countEvents = `-- name: CountEvents :one
SELECT COUNT(*) FROM events
WHERE
    ($1::varchar[] IS NULL OR type = ANY($1)) AND
    ($2::varchar IS NULL OR repository = $2) AND
    ($3::timestamp IS NULL OR created_at >= $3) AND
    ($4::timestamp IS NULL OR created_at <= $4) AND
    ($5::varchar IS NULL OR status = $5) AND
    ($6::varchar IS NULL OR sender = $6)
`

type CountEventsParams struct {
	Column1 []string         `json:"column1"`
	Column2 string           `json:"column2"`
	Column3 pgtype.Timestamp `json:"column3"`
	Column4 pgtype.Timestamp `json:"column4"`
	Column5 string           `json:"column5"`
	Column6 string           `json:"column6"`
}

func (q *Queries) CountEvents(ctx context.Context, arg CountEventsParams) (int64, error) {
	row := q.db.QueryRow(ctx, countEvents,
		arg.Column1,
		arg.Column2,
		arg.Column3,
		arg.Column4,
		arg.Column5,
		arg.Column6,
	)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createEvent = `-- name: CreateEvent :one
INSERT INTO events (
    id, type, payload, created_at, status, error, repository, sender
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8
) RETURNING id, type, payload, created_at, status, error, repository, sender
`

type CreateEventParams struct {
	ID         string    `json:"id"`
	Type       string    `json:"type"`
	Payload    []byte    `json:"payload"`
	CreatedAt  time.Time `json:"createdAt"`
	Status     string    `json:"status"`
	Error      string    `json:"error"`
	Repository string    `json:"repository"`
	Sender     string    `json:"sender"`
}

func (q *Queries) CreateEvent(ctx context.Context, arg CreateEventParams) (Event, error) {
	row := q.db.QueryRow(ctx, createEvent,
		arg.ID,
		arg.Type,
		arg.Payload,
		arg.CreatedAt,
		arg.Status,
		arg.Error,
		arg.Repository,
		arg.Sender,
	)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.Payload,
		&i.CreatedAt,
		&i.Status,
		&i.Error,
		&i.Repository,
		&i.Sender,
	)
	return i, err
}

const deleteEvent = `-- name: DeleteEvent :exec
DELETE FROM events WHERE id = $1
`

func (q *Queries) DeleteEvent(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, deleteEvent, id)
	return err
}

const getEvent = `-- name: GetEvent :one
SELECT id, type, payload, created_at, status, error, repository, sender FROM events WHERE id = $1
`

func (q *Queries) GetEvent(ctx context.Context, id string) (Event, error) {
	row := q.db.QueryRow(ctx, getEvent, id)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.Payload,
		&i.CreatedAt,
		&i.Status,
		&i.Error,
		&i.Repository,
		&i.Sender,
	)
	return i, err
}

const getEventTypeStats = `-- name: GetEventTypeStats :many
SELECT type, COUNT(*) as count
FROM events
WHERE
    ($1::timestamp IS NULL OR created_at >= $1) AND
    ($2::timestamp IS NULL OR created_at <= $2)
GROUP BY type
ORDER BY count DESC
`

type GetEventTypeStatsParams struct {
	Column1 pgtype.Timestamp `json:"column1"`
	Column2 pgtype.Timestamp `json:"column2"`
}

type GetEventTypeStatsRow struct {
	Type  string `json:"type"`
	Count int64  `json:"count"`
}

func (q *Queries) GetEventTypeStats(ctx context.Context, arg GetEventTypeStatsParams) ([]GetEventTypeStatsRow, error) {
	rows, err := q.db.Query(ctx, getEventTypeStats, arg.Column1, arg.Column2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetEventTypeStatsRow
	for rows.Next() {
		var i GetEventTypeStatsRow
		if err := rows.Scan(&i.Type, &i.Count); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listEvents = `-- name: ListEvents :many
SELECT id, type, payload, created_at, status, error, repository, sender FROM events
WHERE
    ($1::varchar[] IS NULL OR type = ANY($1)) AND
    ($2::varchar IS NULL OR repository = $2) AND
    ($3::timestamp IS NULL OR created_at >= $3) AND
    ($4::timestamp IS NULL OR created_at <= $4) AND
    ($5::varchar IS NULL OR status = $5) AND
    ($6::varchar IS NULL OR sender = $6)
ORDER BY created_at DESC
LIMIT $7 OFFSET $8
`

type ListEventsParams struct {
	Column1 []string         `json:"column1"`
	Column2 string           `json:"column2"`
	Column3 pgtype.Timestamp `json:"column3"`
	Column4 pgtype.Timestamp `json:"column4"`
	Column5 string           `json:"column5"`
	Column6 string           `json:"column6"`
	Limit   int32            `json:"limit"`
	Offset  int32            `json:"offset"`
}

func (q *Queries) ListEvents(ctx context.Context, arg ListEventsParams) ([]Event, error) {
	rows, err := q.db.Query(ctx, listEvents,
		arg.Column1,
		arg.Column2,
		arg.Column3,
		arg.Column4,
		arg.Column5,
		arg.Column6,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Event
	for rows.Next() {
		var i Event
		if err := rows.Scan(
			&i.ID,
			&i.Type,
			&i.Payload,
			&i.CreatedAt,
			&i.Status,
			&i.Error,
			&i.Repository,
			&i.Sender,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateEventStatus = `-- name: UpdateEventStatus :one
UPDATE events
SET status = $2, error = $3
WHERE id = $1
RETURNING id, type, payload, created_at, status, error, repository, sender
`

type UpdateEventStatusParams struct {
	ID     string `json:"id"`
	Status string `json:"status"`
	Error  string `json:"error"`
}

func (q *Queries) UpdateEventStatus(ctx context.Context, arg UpdateEventStatusParams) (Event, error) {
	row := q.db.QueryRow(ctx, updateEventStatus, arg.ID, arg.Status, arg.Error)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.Payload,
		&i.CreatedAt,
		&i.Status,
		&i.Error,
		&i.Repository,
		&i.Sender,
	)
	return i, err
}
